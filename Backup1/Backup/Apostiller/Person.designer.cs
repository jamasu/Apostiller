#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Apostiller_Project
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Apostiller")]
	public partial class PersonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertapostille(apostille instance);
    partial void Updateapostille(apostille instance);
    partial void Deleteapostille(apostille instance);
    #endregion
		
		public PersonDataContext() : 
				base(global::Apostiller_Project.Properties.Settings.Default.ApostillerConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PersonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<apostille> apostilles
		{
			get
			{
				return this.GetTable<apostille>();
			}
		}
	}
	
	[Table(Name="dbo.apostille")]
	public partial class apostille : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _title;
		
		private string _capacity;
		
		private string _doc;
		
		private string _about;
		
		private string _sig;
		
		private string _country;
		
		private string _office;
		
		private string _fullname;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncapacityChanging(string value);
    partial void OncapacityChanged();
    partial void OndocChanging(string value);
    partial void OndocChanged();
    partial void OnaboutChanging(string value);
    partial void OnaboutChanged();
    partial void OnsigChanging(string value);
    partial void OnsigChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnofficeChanging(string value);
    partial void OnofficeChanged();
    partial void OnfullnameChanging(string value);
    partial void OnfullnameChanged();
    #endregion
		
		public apostille()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(65)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(65)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_capacity", DbType="NVarChar(35)")]
		public string capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[Column(Storage="_doc", DbType="NVarChar(20)")]
		public string doc
		{
			get
			{
				return this._doc;
			}
			set
			{
				if ((this._doc != value))
				{
					this.OndocChanging(value);
					this.SendPropertyChanging();
					this._doc = value;
					this.SendPropertyChanged("doc");
					this.OndocChanged();
				}
			}
		}
		
		[Column(Storage="_about", DbType="NVarChar(65)")]
		public string about
		{
			get
			{
				return this._about;
			}
			set
			{
				if ((this._about != value))
				{
					this.OnaboutChanging(value);
					this.SendPropertyChanging();
					this._about = value;
					this.SendPropertyChanged("about");
					this.OnaboutChanged();
				}
			}
		}
		
		[Column(Storage="_sig", DbType="NVarChar(6)")]
		public string sig
		{
			get
			{
				return this._sig;
			}
			set
			{
				if ((this._sig != value))
				{
					this.OnsigChanging(value);
					this.SendPropertyChanging();
					this._sig = value;
					this.SendPropertyChanged("sig");
					this.OnsigChanged();
				}
			}
		}
		
		[Column(Storage="_country", DbType="NVarChar(50)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[Column(Storage="_office", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string office
		{
			get
			{
				return this._office;
			}
			set
			{
				if ((this._office != value))
				{
					this.OnofficeChanging(value);
					this.SendPropertyChanging();
					this._office = value;
					this.SendPropertyChanged("office");
					this.OnofficeChanged();
				}
			}
		}
		
		[Column(Storage="_fullname", DbType="NVarChar(65)")]
		public string fullname
		{
			get
			{
				return this._fullname;
			}
			set
			{
				if ((this._fullname != value))
				{
					this.OnfullnameChanging(value);
					this.SendPropertyChanging();
					this._fullname = value;
					this.SendPropertyChanged("fullname");
					this.OnfullnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
